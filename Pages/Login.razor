@page "/login"

@inject ILocalStorageService _localStorage
@inject IMessageService _messageService
@inject NavigationManager _navigation

@layout UnAuthorizedLayout

<FluentStack Style="height:100%; width:100%"
             Orientation="Orientation.Vertical"
             VerticalAlignment="VerticalAlignment.Center"
             HorizontalAlignment="HorizontalAlignment.Center">

    <FluentCard Class="col-xl-6 col-sm-12 col-12">

        <PageSeparator Alignment="PageSeparatorTextAlignment.Center"
                       Size="TextSize.H5">
            Login
        </PageSeparator>

        <FluentMessageBarProvider Class="mb-3" Section="LOGIN_MESSAGES" />

        <FluentTextField style="width: 100%;"
                         Class="mb-3"
                         @bind-Value=ApiKey
                         Label="API Key">
        </FluentTextField>

        <FluentTextField style="width: 100%;"
                         Class="mb-3"
                         @bind-Value=Email
                         Label="Email">
        </FluentTextField>

        <FluentTextField style="width: 100%;"
                         Class="mb-3"
                         @bind-Value=Password
                         Label="Password">
        </FluentTextField>

        <FluentButton OnClick=LoginSystem width="100%" Appearance="Appearance.Accent">Login</FluentButton>

    </FluentCard>

</FluentStack>

@code {

    public string? ApiKey { get; set; }
    public string? Email { get; set; }
    public string? Password { get; set; }

    private async Task LoginSystem()
    {
        _messageService.Clear();

        if (ValidateApiKey())
        {
            await SaveApiKey();

            _navigation.NavigateTo("/");
        }

        var message = $"Please provide a valid API Key!";

        await _messageService.ShowMessageBarAsync(
            message,
            MessageIntent.Error,
            "LOGIN_MESSAGES");
    }

    private async Task SaveApiKey()
    {
        await _localStorage.SetItemAsync<string>(
             LocalStorageKey.ApiKey.GetDescription()!,
         ApiKey!);
    }

    private bool ValidateApiKey()
    {
        if (string.IsNullOrEmpty(ApiKey)) return false;

        return true;
    }

    private void ClearMessage()
    {
        _messageService.Clear();
    }
}
