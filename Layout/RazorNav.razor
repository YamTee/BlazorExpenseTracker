@inject IDialogService DialogService;

@using BlazorExpenseTracker.Models;
@using BlazorExpenseTracker.Components;


<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">

        <Logo Width="200" ApplyThemeColor="true"></Logo>

        <span class="navbar-text">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Settings())"
                          OnClick="OpenPanelRightAsync"
                          Appearance="Appearance.Neutral">
            </FluentButton>
        </span>

    </div>
</nav>

@code {

    private IDialogReference? _dialog;

    public DesignThemeModes Mode { get; set; }

    public OfficeColor? OfficeColor { get; set; }

    private async Task OpenPanelRightAsync()
    {
        var themeParams = new ThemePanelParams
            {
                Mode = Mode,
                OfficeColor = OfficeColor
            };

        var dialogParameters = new DialogParameters();

        _dialog = await DialogService.ShowPanelAsync<ThemePanel>(themeParams, dialogParameters);

        DialogResult result = await _dialog.Result;

        HandlePanel(result);
    }

    private static void HandlePanel(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }

        if (result.Data is not null)
        {
            return;
        }
    }
}